---
title: "Untitled"
format: html
editor: visual
---

## Étude de la non-réponse

Charger les données et les packages.

```{r}
library(naniar)
library(ggplot2)
library(misty)

df <- read.csv("bank_additional_clean.csv", na=c(""))
df <- subset(df, select = -c(X))
print(head(df, 30))

```

Patrons de non-réponse

```{r}
plt <- gg_miss_upset(df)
print(plt)
```

Test de Little

```{r}
little <- mcar_test(df)
print(as.matrix(little))

little2 <- na.test(df, 
                   # p.digits=10
                   )
print(little2$result)
```

Welsh test and chi-squared test of homogeneity for categorical variables

```{r}
df_welsh <- subset(df, select = -c(y))
variables_df <- colnames(df_welsh)

# Create result matrix
var_full <- colnames(df_welsh[, !colSums(is.na(df_welsh))])
var_na <- variables_df[!(variables_df %in% var_full)]
results <- matrix("-", ncol = length(variables_df), nrow = length(variables_df) - ncol_full)
colnames(results) <- variables_df
rownames(results) <- var_na

for (variable in variables_df){
  # Skip variables with no missing values
  if (sum(is.na(df_welsh[variable])) == 0){
    next
  }
  
  # Split the df across the variable na and full (not na)
  df_var_na <- df_welsh[is.na(df_welsh[variable]),]
  df_var_full <- df_welsh[!is.na(df_welsh[variable]),]
  
  # Iterate over all other variables
  for (var_compare in  variables_df){
    
    # Skip if it is the same variable
    if (variable == var_compare){
      next
    }
    
    if (class(df_var_na[, var_compare]) == "character"){
      # Do the chi-squared test of homogeneity for categorical variables
      freq_na <- as.data.frame(table(df_var_na[, var_compare], useNA="always"))[, "Freq"]
      freq_full <- as.data.frame(table(df_var_full[, var_compare], useNA="always"))[, "Freq"]
      freq <- cbind(freq_na, freq_full)
      pvalue <- chisq.test(freq)$p.value
      
    } else {
      # Do the welch test for numerical variables
      vec_na <- df_var_na[, var_compare]
      vec_full <- df_var_full[, var_compare]
      pvalue <- t.test(vec_na, vec_full)$p.value
    }
    # Save the results
    results[variable, var_compare] <- round(pvalue, digits = 4)
  }
}
df_res <- data.frame(results)
print(head(df_res))
# write.csv(df_res, "mcar_variables.csv")
```
